Script started on Tue 29 Nov 2016 08:36:36 AM EST
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ cat list_packaage.ada[Kb 
-- list_package.adb defines Ada linked list operations.
--
-- Begun by: Dr. Jump, CS315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/2016
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List : out List) is
  begin
    A_List.Its_First := null;
    A_List.Its_Last := null;
    A_List.Its_Length := 0;
  end Init;

  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List : in List) return Boolean is
  begin
    return A_List.Its_Length = 0;
  end Empty;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer is
  begin
    return A_List.Its_Length;
  end Length;

  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List : in out List) is
    Temp_Ptr : constant Node_Ptr := new List_Node;
  begin
    Temp_Ptr.Its_Value := A_Value;
    Temp_Ptr.Its_Next := null;

    if A_List.Its_Length = 0 then
       A_List.Its_First := Temp_Ptr;
    else
       A_List.Its_Last.Its_Next := Temp_Ptr;
    end if;

    A_List.Its_Last := Temp_Ptr;

    A_List.Its_Length := A_List.Its_Length + 1;
  end Append;

  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------
  procedure Put(A_List : in List) is
     Temp_Ptr : Node_Ptr := A_List.Its_First;
   begin
     while Temp_Ptr /= null loop
        Put(' '); Put(Temp_Ptr.Its_Value);
        Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;
   end Put;

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------
  function Max(A_List : in List) return Integer is
     Temp_Ptr : Node_Ptr := A_List.Its_First;
     Max_Value : Integer := -999999;
   begin
     while Temp_Ptr /= null loop
        if Temp_Ptr.Its_Value > Max_Value then
          Max_Value := Temp_Ptr.Its_Value;
        end if;
        Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;
     return Max_Value;
   end Max;

   ---------------------------------------
   -- Search for the given value in a List  -
   -- Receive: aList, a List.
   --          aValue, an value to look for
   -- Return: the position of the value
   ---------------------------------------
   function Search(A_List : in List; aValue : in Integer) return Integer is
      Temp_Ptr : Node_Ptr := A_List.Its_First;
      Return_Value : Integer := -1;
      Count : Integer := 0;
    begin
      while Temp_Ptr /= null and Return_Value < 0 loop
         if Temp_Ptr.Its_Value = aValue then
           Return_Value := Count;
         end if;
         Temp_Ptr := Temp_Ptr.Its_Next;
         Count := Count + 1;
      end loop;
      return Return_Value;
    end Search;

end List_Package;
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ cat list_packaage.adb [1P s 
-- list_package.ads declares an Ada linked list and its operations.
--
-- Begun by: Dr. Jump, CS315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/2016
------------------------------------------------------------------

package List_Package is

  -- the list-type itself (public)
  type List is private;

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List: out List);


  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List: in List) return Boolean;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer;


  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List: in out List);


  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------
  procedure Put(A_List : in List);

  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------
  function Max(A_List : in List) return Integer;

  ---------------------------------------
  -- Search for the given value in a list.
  -- Receive: aList, a List.
  --          aValue, a value to search for
  -- Return: the position of the value
  ---------------------------------------
  function Search(A_List : in List; aValue : in Integer) return Integer;

 private
   type List_Node;
   type Node_Ptr is access List_Node;
   type List_Node is
          record
           Its_Value : Integer;
           Its_Next : Node_Ptr;
          end record;
   type List is
          record
          Its_First : Node_Ptr;
          Its_Last : Node_Ptr;
          Its_Length : Integer;
        end record;

end List_Package;
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ cat list_packaage.ads [1P[1P[1P[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C.a[1P[A]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ [C[C[C[C[C[C[C[C[C[C[C[C.ad[1P[A]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ [C[C[C[C[C[C[C[C[C[C[C.ads[1P [A]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ [C[C[C[C[C[C[C[C[C[C.ads [K[A]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ [C[C[C[C[C[C[C[C[C.ads  [K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P[1P[1P[1@m[1@a[1@x[C[C[C[C[1P d [1P b 
-- max.adb finds the max of a list of integers.
--
-- Begun by: Dr. Jump, CS 315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/2016
--------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO, List_Package;
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package;

procedure Max is
                              -- define 3 lists
  List1, List2, List3, List4 : List;

begin
  Init(List1);                -- initialize them
  Init(List2);
  Init(List3);
  Init(List4);

  Append(99, List1);          -- 99, 88, 77, 66, 55
  Append(88, List1);          -- max is first
  Append(77, List1);
  Append(66, List1);
  Append(55, List1);

  Append(55, List2);          -- 55, 66, 77, 88, 99
  Append(66, List2);          -- max is last
  Append(77, List2);
  Append(88, List2);
  Append(99, List2);

  Append(55, List3);          -- 55, 77, 99, 88, 66
  Append(77, List3);          -- max is in the middle
  Append(99, List3);
  Append(88, List3);
  Append(66, List3);

  Append(55, List4);          -- 55, 77, 99, 88, 66
  Append(77, List4);          -- max is in the middle
  Append(33, List4);
  Append(88, List4);
  Append(66, List4);

  Put(List1); New_Line;       -- output the 3 lists
  Put(List2); New_Line;
  Put(list3); New_Line;
  Put(List4); New_Line;
                              -- display their maxima
  Put("The maximum value in list 1 is ");  Put( Max(List1) ); New_Line;
  Put("The maximum value in list 2 is ");  Put( Max(List2) ); New_Line;
  Put("The maximum value in list 3 is ");  Put( Max(List3) ); New_Line;

  Put("The position of 99 in list 1 is ");  Put( Search(List1, 99) ); New_Line;
  Put("The position of 99 in list 2 is ");  Put( Search(List2, 99) ); New_Line;
  Put("The position of 99 in list 3 is ");  Put( Search(List3, 99) ); New_Line;
  Put("The position of 99 in list 4 is ");  Put( Search(List4, 99) ); New_Line;

end Max;
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ mak
No command 'mak' found, did you mean:
 Command 'make' from package 'make-guile' (universe)
 Command 'make' from package 'make' (main)
 Command 'mad' from package 'mmv' (universe)
 Command 'mag' from package 'texlive-binaries' (main)
 Command 'mat' from package 'mat' (universe)
 Command 'mawk' from package 'mawk' (main)
 Command 'maki' from package 'maki' (universe)
 Command 'gak' from package 'gui-apt-key' (universe)
 Command 'map' from package 'sgt-puzzles' (universe)
 Command 'mark' from package 'nmh' (universe)
 Command 'mark' from package 'mailutils-mh' (universe)
 Command 'maq' from package 'maq' (universe)
 Command 'man' from package 'man-db' (main)
 Command 'sak' from package 'seqan-apps' (universe)
mak: command not found
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ make
gcc -c -Wall max.adb
gcc -c -Wall list_package.adb
gnatbind  max.ali
gnatlink  max.ali -o adaMax
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ make[Kcat max.adb list_packaage.ads b[Cs[C[A]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ [C[C[C[C[1Pmax.adb 
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Cmak[Ke[K./adaMax 
          99          88          77          66          55
          55          66          77          88          99
          55          77          99          88          66
          55          77          33          88          66
The maximum value in list 1 is          99
The maximum value in list 2 is          99
The maximum value in list 3 is          99
The position of 99 in list 1 is           0
The position of 99 in list 2 is           4
The position of 99 in list 3 is           2
The position of 99 in list 4 is          -1
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ada[00m$ exit

Script done on Tue 29 Nov 2016 08:37:22 AM EST
