Script started on Tue 29 Nov 2016 08:46:47 AM EST
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ruby[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ruby[00m$ cat l[KList.rb  [A
# List.rb implements a linked list structure in Ruby.
#
# Begun by: Dr. Jump, CS 315 at King's College
# Completed by: Robert Lowman
# Date: 11/29/2016
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List

   # initialize a List to be empty
   # Postcondition: first == nil and last == nil and length == 0

   # Replace this line with a List constructor definition
   def initialize
     @first = nil
     @length = 0
     @last = nil
   end


   # create reader method for length
   def getLength()
     return @length
   end

   # Am I empty?
   # Return: length == 0
   def empty?
      @length == 0
   end

   # append a value to me
   # Receive: value, the item to be appended
   # Postcondition: my last item is value and
   #                 my length is one more than it was
   def append(value)
      newNode = Node.new(value, nil)

      if empty?
         @first = newNode
      else
         @last.next = newNode
      end

      @last = newNode
      @length += 1
      self
   end


   # print my items
   # Postcondition: my items have been displayed to the screen
   def print
     temp = @first
     while !temp.nil?
       printf " #{temp.value}"
       temp = temp.next
     end
   end


   # find my maximum item
   # Return: my maximum item
   def max
     temp = @first
     maxValue = -999999
     while !temp.nil?
       if temp.value > maxValue then
         maxValue = temp.value
       end
       temp = temp.next
     end
     return maxValue
   end

   # find my maximum item
   # Return: my maximum item
   def search(value)
     temp = @first
     returnValue = -1
     count = 0;
     while (!temp.nil?) && (returnValue < 0)
       if temp.value == value then
         returnValue = count
       end
       temp = temp.next
       count = count + 1
     end
     return returnValue
   end


   class Node
      def initialize(item, link)
         @value = item
         @next = link
      end

      attr_reader :value
      attr_accessor :next
   end

end
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ruby[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ruby[00m$ cat max.rb
# max.rb tests a Ruby linked list.
#
# Begun by: Dr. Jump, CS 315 at King's College
# Completed by: Robert Lowman
# Date: 11/29/2016
####################################################

require './List.rb'

list1 = List.new
list2 = List.new
list3 = List.new
list4 = List.new

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)
list4.append(55).append(77).append(33).append(88).append(66)

list1.print
puts
puts "Maximum of list1: #{list1.max}"
puts "Position of 99 in list1: #{list1.search(99)}"

list2.print
puts
puts "Maximum of list2: #{list2.max}"
puts "Position of 99 in list2: #{list2.search(99)}"

list3.print
puts
puts "Maximum of list3: #{list3.max}"
puts "Position of 99 in list3: #{list3.search(99)}"

list4.print
puts
puts "Maximum of list4: #{list4.max}"
puts "Position of 99 in list4: #{list4.search(99)}"
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ruby[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ruby[00m$ ruby max.rb  [A
 99 88 77 66 55
Maximum of list1: 99
Position of 99 in list1: 0
 55 66 77 88 99
Maximum of list2: 99
Position of 99 in list2: 4
 55 77 99 88 66
Maximum of list3: 99
Position of 99 in list3: 2
 55 77 33 88 66
Maximum of list4: 88
Position of 99 in list4: -1
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit10-hw/ruby[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit10-hw/ruby[00m$ exit

Script done on Tue 29 Nov 2016 08:47:05 AM EST
