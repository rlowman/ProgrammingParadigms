Script started on Tue 06 Dec 2016 08:50:01 AM EST
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit11-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit11-hw/ada[00m$ cat *.ad s
-- bird_package.ads gives Bird-related declarations
--
-- Begun by: Dr. Jump for CS 315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/2016
---------------------------------------------------

package Bird_Package is

  type Bird_Type is tagged private;

 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type whose My_Name = Name.       -
 ----------------------------------------------------
 procedure Init(A_Bird : out Bird_Type'Class; Name : in String);

 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------
 function  Name(A_Bird : in Bird_Type) return String;


 ----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------
 function  Call(A_Bird : in Bird_Type) return String;


 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
 function  Type_Name(A_Bird : in Bird_Type) return String;


 ----------------------------------------------------
 -- A Bird's movement                               -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "bird-things".                          -
 ----------------------------------------------------
 function Movement(A_Bird : in Bird_Type) return String;


 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------
 procedure Put(A_Bird : in Bird_Type'Class);


private

  type Bird_Type is
    tagged record
    My_Name : String(1..6);
  end record;
end Bird_Package;
-- duck_package.ads gives Duck-related declarations,
--
--  and derives Duck from Bird.
-- Begun by: Dr. Jump for CS 315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/2016
---------------------------------------------------

with FlyingBird_Package; use FlyingBird_Package;

package Duck_Package is

  type Duck_Type is new FlyingBird_Type with private;

 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
 function Call(A_Duck : in Duck_Type) return String;

 ------------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------
 function Type_Name(A_Duck : in Duck_Type) return String;

private
  type Duck_Type is new FlyingBird_Type with
    record
      null;
    end record;

end Duck_Package;
-- flyingbird_package.ads gives FlyingBird-related declarations,
--
-- Completed by: Robert Lowman
-- Date: 12/5/2016
---------------------------------------------------

with Bird_Package; use Bird_Package;

package FlyingBird_Package is

  type FlyingBird_Type is new Bird_Type with private;

  ----------------------------------------------------
  -- A FlyingBirds's movement                        -
  -- Receive: A_FlyingBird, a FlyingBird_Type.       -
  -- Return: "flew past"                             -
  ----------------------------------------------------
  function Movement(A_FlyingBird : in FlyingBird_Type) return String;

private
  type FlyingBird_Type is new Bird_Type with
    record
      null;
    end record;

end FlyingBird_Package;
-- goose_package.ads gives Goose-related declarations,
--
--  and derives Goose from Bird.
-- Begun by: Dr. Jump for CS 315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/2016
---------------------------------------------------

with FlyingBird_Package; use FlyingBird_Package;

package Goose_Package is

  type Goose_Type is new FlyingBird_Type with private;

 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose.                      -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------
 function  Call(A_Goose : in Goose_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose.                       -
 -- Return: "Goose".                                 -
 -----------------------------------------------------
 function  Type_Name(A_Goose : in Goose_Type) return String;

private
  type Goose_Type is new FlyingBird_Type with
      record
        null;
      end record;

end Goose_Package;
-- kiwi_package.ads gives Kiwi-related declarations,
--  and derives Owl from Bird.
--
-- Completed by: Robert Lowman
-- Date: 12/5/2016
---------------------------------------------------

with WalkingBird_Package; use WalkingBird_Package;

package Kiwi_Package is

  type Kiwi_Type is new WalkingBird_Type with private;

 ----------------------------------------------------
 -- A Kiwi's Call (Over-rides Bird.Call())           -
 -- Receive: A_Kiwi, a Kiwi_Type.                   -
 -- Return: "twee-do"                               -
 ----------------------------------------------------
 function Call(A_Kiwi : in Kiwi_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Kiwi                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Kiwi, a Kiwi_Type.                    -
 -- Return: "Kiwi".                                   -
 -----------------------------------------------------
 function Type_Name(A_Kiwi : in Kiwi_Type) return String;

private
  type Kiwi_Type is new WalkingBird_Type with
    record
      null;
    end record;

end Kiwi_Package;
-- ostrich_package.ads gives Owl-related declarations,
--  and derives Owl from Bird.
--
-- Completed by: Robert Lowman
-- Date: 12/5/2016
---------------------------------------------------

with WalkingBird_Package; use WalkingBird_Package;

package Ostrich_Package is

  type Ostrich_Type is new WalkingBird_Type with private;

 ----------------------------------------------------
 -- A Ostrich's Call (Over-rides Bird.Call())           -
 -- Receive: An_Ostrich, an Ostrich_Type.                   -
 -- Return: "Snork"                                 -
 ----------------------------------------------------
 function Call(An_Ostrich : in Ostrich_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Ostrich                         -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Ostrich, an Ostrich_Type.                    -
 -- Return: "Ostrich".                                   -
 -----------------------------------------------------
 function Type_Name(An_Ostrich : in Ostrich_Type) return String;

private
  type Ostrich_Type is new WalkingBird_Type with
    record
      null;
    end record;

end Ostrich_Package;
-- owl_package.ads gives Owl-related declarations,
--  and derives Owl from Bird.
--
-- Begun by: Dr. Jump for CS 315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/2016
---------------------------------------------------

with FlyingBird_Package; use FlyingBird_Package;

package Owl_Package is

  type Owl_Type is new FlyingBird_Type with private;

 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
 function Call(A_Owl : in Owl_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------
 function Type_Name(A_Owl : in Owl_Type) return String;

private
  type Owl_Type is new FlyingBird_Type with
    record
      null;
    end record;

end Owl_Package;
-- penguin_package.ads gives Penguin-related declarations,
--  and derives Penguin from Bird.
--
-- Completed by: Robert Lowman
-- Date: 12/5/2016
---------------------------------------------------

with WalkingBird_Package; use WalkingBird_Package;

package Penguin_Package is

  type Penguin_Type is new WalkingBird_Type with private;

 ----------------------------------------------------
 -- A Penguin's Call (Over-rides Bird.Call())           -
 -- Receive: A_Penguin, a Penguin_Type.                   -
 -- Return: "Huh-huh-huh-huuuuh"                                 -
 ----------------------------------------------------
 function Call(A_Penguin : in Penguin_Type) return String;

 -----------------------------------------------------
 -- Determine type of a Penguin                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Penguin, a Penguin_Type.                    -
 -- Return: "Penguin".                                   -
 -----------------------------------------------------
 function Type_Name(A_Penguin : in Penguin_Type) return String;

private
  type Penguin_Type is new WalkingBird_Type with
    record
      null;
    end record;

end Penguin_Package;
-- walkingbird_package.ads gives walkingBird-related declarations,
--
-- Completed by: Robert Lowman
-- Date: 12/5/2016
---------------------------------------------------

with Bird_Package; use Bird_Package;

package WalkingBird_Package is

  type WalkingBird_Type is new Bird_Type with private;

  ----------------------------------------------------
  -- A WalkingBirds's movement                       -
  -- Receive: A_WalkingBird, a WalkingBird_Type.     -
  -- Return: "walked past"                             -
  ----------------------------------------------------
  function Movement(A_WalkingBird : in WalkingBird_Type) return String;

private
  type WalkingBird_Type is new Bird_Type with
    record
      null;
    end record;

end WalkingBird_Package;
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit11-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit11-hw/ada[00m$ cat *.adss[Kb
-- bird_package.adb gives Bird-related definitions
--
-- Begun by: Dr. Jump for CS 315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/2016
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Bird_Package is

 ----------------------------------------------------
 -- initialization                                  -
 -- Receive: A_Bird, a Bird_Type;                   -
 --          Name, a String                         -
 -- Return: a Bird_Type in which My_Name = Name.    -
 ----------------------------------------------------
 procedure Init(A_Bird : out Bird_Type'Class; Name : in String) is
 begin
   A_Bird.My_Name := Name;
 end Init;

 ----------------------------------------------------
 -- Name accessor                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: A_Bird.My_Name.                         -
 ----------------------------------------------------
 function Name(A_Bird : in Bird_Type) return String is
 begin
   return A_Bird.My_Name;
 end Name;

 ----------------------------------------------------
 -- A Bird's Call                                   -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: a default bird-call ("Squawk!").        -
 ----------------------------------------------------
 function Call(A_Bird : in Bird_Type) return String is
 begin
   return "Squawwwwwwk!";
 end Call;

 ----------------------------------------------------
 -- Determine type of a Bird (for derived types)    -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "Bird".                                 -
 ----------------------------------------------------
 function Type_Name(A_Bird : in Bird_Type) return String is
 begin
   return "Bird";
 end Type_Name;

 ----------------------------------------------------
 -- A Bird's movement                               -
 -- Receive: A_Bird, a Bird_Type.                   -
 -- Return: "bird-things".                          -
 ----------------------------------------------------
 function Movement(A_Bird : in Bird_Type) return String is
 begin
   return "did bird-things";
 end Movement;

 ----------------------------------------------------
 -- Output a Bird                                   -
 -- Receive: A_Bird, a Bird or subclass of Bird.    -
 -- Output: Everything known about A_Bird           -
 ----------------------------------------------------
 procedure Put(A_Bird : in Bird_Type'Class) is
 begin
   Put( Name(A_Bird) );
   Put( ' ' );
   Put( Type_Name(A_Bird) );
   Put( " just ");
   Put( Movement(A_Bird));
   Put( " and said " );
   Put( Call(A_Bird) );
 end Put;

end Bird_Package;
-- birdtest.adb tests our Birds type
--
-- Begun by: Dr. Jump for CS 315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/16
-----------------------------------------------------

with Ada.Text_IO, Bird_Package, Duck_Package, Goose_Package, Owl_Package, Kiwi_Package, Ostrich_Package, Penguin_Package;
use Ada.Text_IO, Bird_Package, Duck_Package, Goose_Package, Owl_Package, Kiwi_Package, Ostrich_Package, Penguin_Package;


procedure BirdTest is

 Bird1 : Bird_Type;       -- base class
 Bird2 : Duck_Type;       -- derived class 1
 Bird3 : Goose_Type;      -- derived class 2
 Bird4 : Owl_Type;        -- derived class 3
 Bird5 : Penguin_Type;
 Bird6 : Kiwi_Type;
 Bird7 : Ostrich_Type;

begin
   Init(Bird1, "Tweety");
   Put(Bird1); New_Line;

   Init(Bird2, "Donald");
   Put(Bird2); New_Line;

   Init(Bird3, "Mother");
   Put(Bird3); New_Line;

   Init(Bird4, "Woodsy");
   Put(Bird4); New_Line;

   Init(Bird5, "Petery");
   Put(Bird5); New_Line;

   Init(Bird6, "Kennys");
   Put(Bird6); New_Line;

   Init(Bird7, "Orvile");
   Put(Bird7); New_Line;

 New_Line;
end BirdTest;
-- duck_package.adb gives Duck-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Jump for CS 315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/16
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Duck_Package is

 ----------------------------------------------------
 -- A Duck's Call (Over-rides Bird.Call())          -
 -- Receive: A_Duck, a Duck_Type.                   -
 -- Return: "Quack!"                                -
 ----------------------------------------------------
 function Call(A_Duck : in Duck_Type) return String is
   begin
    return "Quack!";
   end Call;

 ------------------------------------------------------------
 -- Determine type of a Duck (Over-rides Bird.Type_Name()) -
 -- Receive: A_Duck, a Duck_Type.                          -
 -- Return: "Duck".                                        -
 -----------------------------------------------------------
 function Type_Name(A_Duck : in Duck_Type) return String is
   begin
    return "Duck";
   end Type_Name;

end Duck_Package;
-- flyingbird_package.adb gives Flyingbird-related definitions
--
-- Completed by: Robert Lowman
-- Date: 12/5/16
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body FlyingBird_Package is

 ----------------------------------------------------
 -- A FlyingBirds's movement                        -
 -- Receive: A_FlyingBird, a FlyingBird_Type.       -
 -- Return: "flew past"                             -
 ----------------------------------------------------
 function Movement(A_FlyingBird : in FlyingBird_Type) return String is
   begin
    return "flew past";
  end Movement;

end FlyingBird_Package;
-- goose_package.adb gives Goose-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Jump for CS 315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/2016
---------------------------------------------------

package body Goose_Package is

 ----------------------------------------------------
 -- A Goose's Call (Over-rides Bird.Call())         -
 -- Receive: A_Goose, a Goose_Type.                 -
 -- Return: "Honk!"                                 -
 ----------------------------------------------------
 function Call(A_Goose : in Goose_Type) return String is
 begin
   return "Honk!";
 end Call;

 -----------------------------------------------------
 -- Determine type of a Goose                        -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: A_Goose, a Goose_Type.                  -
 -- Return: "Goose".                                 -
 -----------------------------------------------------
 function Type_Name(A_Goose : in Goose_Type) return String is
 begin
   return "Goose";
 end Type_Name;

end Goose_Package;
-- kiwi_package.adb gives Kiwi-related definitions
--  by over-riding Bird-related definitions.
--
-- Completed by: Robert Lowman
-- Date: 12/4/16
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Kiwi_Package is

 ----------------------------------------------------
 -- A Kiwi_Package's Call (Over-rides Bird.Call())          -
 -- Receive: A_Kiwi, a Kiwi_Type.                   -
 -- Return: "Snork"                                -
 ----------------------------------------------------
 function Call(A_Kiwi : in Kiwi_Type) return String is
   begin
    return "Twee-do";
   end Call;

 ------------------------------------------------------------
 -- Determine type of a Kiwi (Over-rides Bird.Type_Name()) -
 -- Receive: A_Kiwi, a Kiwi_Type.                          -
 -- Return: "Kiwi".                                        -
 -----------------------------------------------------------
 function Type_Name(A_Kiwi : in Kiwi_Type) return String is
   begin
    return "Kiwi";
   end Type_Name;

end Kiwi_Package;
-- ostrich_package.adb gives Ostrich-related definitions
--  by over-riding Bird-related definitions.
--
-- Completed by: Robert Lowman
-- Date: 12/4/16
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Ostrich_Package is

 ----------------------------------------------------
 -- An Ostrich_Package's Call (Over-rides Bird.Call())          -
 -- Receive: An_Ostrich, an Ostrich_Type.                   -
 -- Return: "Snork"                                -
 ----------------------------------------------------
 function Call(An_Ostrich : in Ostrich_Type) return String is
   begin
    return "Snork";
   end Call;

 ------------------------------------------------------------
 -- Determine type of an Ostrich (Over-rides Bird.Type_Name()) -
 -- Receive: An_Ostrich, an Ostrich_Type.                          -
 -- Return: "Ostrich".                                        -
 -----------------------------------------------------------
 function Type_Name(An_Ostrich : in Ostrich_Type) return String is
   begin
    return "Ostrich";
   end Type_Name;

end Ostrich_Package;
-- owl_package.adb gives Owl-related definitions
--  by over-riding Bird-related definitions.
--
-- Begun by: Dr. Jump for CS 315 at King's College
-- Completed by: Robert Lowman
-- Date: 11/29/2016
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Owl_Package is

 ----------------------------------------------------
 -- A Owl's Call (Over-rides Bird.Call())           -
 -- Receive: An_Owl, an Owl_Type.                   -
 -- Return: "Whoo!"                                 -
 ----------------------------------------------------
 function Call(A_Owl : in Owl_Type) return String is
 begin
   return "Hoot!";
 end Call;

 -----------------------------------------------------
 -- Determine type of a Owl                          -
 -- (Over-rides Bird.Type_Name())                    -
 -- Receive: An_Owl, an Owl_Type.                    -
 -- Return: "Owl".                                   -
 -----------------------------------------------------
 function Type_Name(A_Owl : in Owl_Type) return String is
 begin
   return "Owl";
 end Type_Name;

end Owl_Package;
-- penguin_package.adb gives Penguin-related definitions
--  by over-riding Bird-related definitions.
--
-- Completed by: Robert Lowman
-- Date: 12/4/16
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body Penguin_Package is

 ----------------------------------------------------
 -- A Penguin's Call (Over-rides Bird.Call())          -
 -- Receive: A_Penguin, a Penguin_Type.                   -
 -- Return: ""                                -
 ----------------------------------------------------
 function Call(A_Penguin : in Penguin_Type) return String is
   begin
    return "Huh-huh-huh-huuuuh";
   end Call;

 ------------------------------------------------------------
 -- Determine type of a  (Over-rides Bird.Type_Name()) -
 -- Receive: A_Penguin, a Penguin_Type.                          -
 -- Return: "Penguin".                                        -
 -----------------------------------------------------------
 function Type_Name(A_Penguin : in Penguin_Type) return String is
   begin
    return "Penguin";
   end Type_Name;

end Penguin_Package;
-- walkingbird_package.adb gives walkingbird-related definitions
--
-- Completed by: Robert Lowman
-- Date: 12/5/16
---------------------------------------------------

with Ada.Text_IO;
use Ada.Text_IO;

package body WalkingBird_Package is

 ----------------------------------------------------
 -- A WalkingBirds's movement                       -
 -- Receive: A_WalkingBird, a WalkingBird_Type.     -
 -- Return: "walked past"                             -
 ----------------------------------------------------
 function Movement(A_WalkingBird : in WalkingBird_Type) return String is
   begin
    return "walked past";
  end Movement;

end WalkingBird_Package;
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit11-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit11-hw/ada[00m$ make
/usr/bin/gcc -c birdtest.adb
/usr/bin/gcc -c bird_package.adb
/usr/bin/gcc -c walkingbird_package.adb
/usr/bin/gcc -c flyingbird_package.adb
/usr/bin/gcc -c ostrich_package.adb
/usr/bin/gcc -c kiwi_package.adb
/usr/bin/gcc -c penguin_package.adb
/usr/bin/gcc -c duck_package.adb
/usr/bin/gcc -c goose_package.adb
/usr/bin/gcc -c owl_package.adb
/usr/bin/gnatbind birdtest.ali
/usr/bin/gnatlink birdtest.ali
]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit11-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit11-hw/ada[00m$ ./birdtesst 
Tweety Bird just did bird-things and said Squawwwwwwk!
Donald Duck just flew past and said Quack!
Mother Goose just flew past and said Honk!
Woodsy Owl just flew past and said Hoot!
Petery Penguin just walked past and said Huh-huh-huh-huuuuh
Kennys Kiwi just walked past and said Twee-do
Orvile Ostrich just walked past and said Snork

]0;csadmin@csadmin-VirtualBox: ~/CS315-F16-LowmanRobert/unit11-hw/ada[01;32mcsadmin@csadmin-VirtualBox[00m:[01;34m~/CS315-F16-LowmanRobert/unit11-hw/ada[00m$ exit

Script done on Tue 06 Dec 2016 08:50:30 AM EST
